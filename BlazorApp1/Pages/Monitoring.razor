@page "/"
@using MQTTnet
@using System.Text.Json

<RadzenStack Gap="1rem">
    <RadzenDataGrid TItem="Esp32" @ref="dataGrid" Data="@filteredData" AllowPaging="true"
                    PagerHorizontalAlign="HorizontalAlign.Center" AllowSorting="true"
                    PageSizeOptions="@pageSizeOptions" ShowPagingSummary="@showPagerSummary"
                    PagingSummaryFormat="@pagingSummaryFormat">
        <Columns>

            <RadzenDataGridColumn TItem="Esp32" Property="Voltage" Title="Device Id" />
            <RadzenDataGridColumn TItem="Esp32" Property="Current" Title="Type" />
            <RadzenDataGridColumn TItem="Esp32" Property="Power" Title="Value" />
            <RadzenDataGridColumn TItem="Esp32" Property="Kwh" Title="Kwh" />

        </Columns>
    </RadzenDataGrid>
</RadzenStack>

@code {
    [Inject]
    private MqttService mqttService { get; set; }

    // private double voltage = 0;
    // private double current = 0;
    // private double power = 0;
    // private double kwh = 0;
    List<Esp32> filteredData = new()
    {
        new Esp32{Voltage=1,Current=2,Power=3,Kwh=4},
        new Esp32{Voltage=1,Current=2,Power=3,Kwh=4},
        new Esp32{Voltage=1,Current=2,Power=3,Kwh=4},
        new Esp32{Voltage=1,Current=2,Power=3,Kwh=4},
        new Esp32{Voltage=1,Current=2,Power=3,Kwh=4},
    };
    protected override async Task OnInitializedAsync()
    {
        // Connect to MQTT
        await mqttService.ConnectToAwsMqttAsync();

        var lastMessage = mqttService.GetLastMessage();
        UpdateData(lastMessage); // Update data if there's a last message

        mqttService.ApplicationMessageReceived += message =>
        {
            UpdateData(message); // Update the UI whenever a new message is received
        };
    }

    private void UpdateData(string message)
    {
        if (!string.IsNullOrEmpty(message))
        {
            var data = JsonSerializer.Deserialize<Esp32>(message);
            if (data != null)
            {

                // voltage = data.Voltage;
                // current = data.Current;
                // power = data.Power;
                // kwh = data.Kwh;

                // Ensure the UI updates when data changes
                InvokeAsync(StateHasChanged);
            }
        }
    }

public class Esp32
{
    public double Voltage { get; set; }
    public double Current { get; set; }
    public double Power { get; set; }
    public double Kwh { get; set; }
}

    // Grid
    string pagingSummaryFormat = "Displaying page {0} of {1} <b>(total {2} records)</b>";
    Esp32 deviceModel = new();
    RadzenDataGrid<Esp32>? dataGrid;
    IEnumerable<int> pageSizeOptions = new int[] { 10, 20, 30 };
    bool showPagerSummary = true;
} 

